@startuml

skinparam monochrome true
skinparam defaultFontName Droid Sans

package "game" {
    class DemoLoggerClient {
        {static} + main(args:String[]):void
    }
    class Logging {
        {static} - loggerManager:LoggerManager
        {static} - logger:Logger
        ---
        {static} + getLogger():Logger
    }
    note top of Logging
        the game classes that use Logging and Logger are not displayed
    end note
    Logging o-- loggerinterface.LoggerManager
    Logging o-- loggerinterface.Logger
    DemoLoggerClient --> Logging
    DemoLoggerClient --> loggerinterface.Logger
}

package "loggerinterface" {
    interface Logger {
        + log(level:LogLevel, message:String):void
        + log(level:LogLevel, message:String, args:Object[]):void
        + log(level:LogLevel, throwable:Throwable, message:String):void
        + log(level:LogLevel, throwable:Throwable, message:String, args:Object[]):void
    }
    note bottom of Logger
        trace(), debug() etc. omitted
    end note
    class Configuration {
        - jarFile:String
        - loggerSetupClass:String
        - loggerSetupConfiguration:LoggerSetupConfiguration
        + getJarFile():String
        + setJarFile(jarFile:String):void
        + getLoggerSetupClass():String
        + setLoggerSetupClass(loggerSetupClass:String):void
        + getLoggerSetupConfiguration():LoggerSetupConfiguration
        + setLoggerSetupConfiguration(loggerSetupConfiguration:LoggerSetupConfiguration):void
    }
    class ConfigurationParser {
        + getConfiguration():Configuration
        + saveConfiguration(configuration:Configuration):void
    }
    class LoggerManager {
        {static} - xmlConfiguration:Configuration
        - setup:LoggerSetup
        + LoggerManager()
        + LoggerManager(configuration:Configuration)
        + getLogger():Logger
        + hasProperLoggerSetup():boolean
        + setLogLevel(logLevel:LogLevel):void
        + getLogLevel():LogLevel
        + setHostAndPort(host:String, port:int):void
        + hasProperLogger():boolean
        {static} - getConfiguration():Configuration
        - createLoggerSetupInstance(configuration:Configuration):LoggerSetup
        - getClassLoader(jarFile:String):ClassLoader
    }
    class LoggerSetup {
        ~ getLogger():Logger
        ~ getLogger(loggerName:String):Logger
        ~ configure(configure:LoggerSetupConfiguration):void
        ~ setLogLevel(logLevel:LogLevel)
        ~ getLogLevel():LogLevel
        ~ setHostAndPort(host:String, port:int):void
    }
    class LoggerSetupConfiguration {
        - level:LogLevel
        - host:String
        - port:int
        + setLevel(level:LogLevel):void
        + getHost():String
        + setHost(host:String):String
        + getPort():int
        + setPort(port:int):void
    }
    enum LogLevel {
        {static} + TRACE
        {static} + DEBUG
        {static} + INFO
        {static} + WARNING
        {static} + ERROR
        {static} + CRITICAL
        - label:String
        - priority:int
        - LogLevel(label:String, priority:int)
        + getLabel():String
        + getPriority():int
    }
    Configuration o-- LoggerSetupConfiguration
    ConfigurationParser --> Configuration
    LoggerManager o-- Configuration
    LoggerManager o-- LoggerSetup
    LoggerManager --> LogLevel
    LoggerSetup o-- Logger
    LoggerSetup --> LoggerSetupConfiguration
    LoggerSetup --> LogLevel
    LoggerSetupConfiguration --> LogLevel
}

package "loggercomponent" {
    class LoggerComponent {
        - actualLevel:LogLevel
        - output:ObjectOutputStream
        - input:ObjectInputStream
        {static} + create(level:LogLevel, output:ObjectOutputStream, input:ObjectInputStream):LoggerComponent
        - LoggerComponent(level:LogLevel, output:ObjectOutputStream, input:ObjectInputStream)
        + log(level:LogLevel, message:String):void
        + log(level:LogLevel, message:String, args:Object[]):void
        + log(level:LogLevel, throwable:Throwable, message:String):void
        + log(level:LogLevel, throwable:Throwable, message:String, args:Object[]):void
        - send(message:Message):void
        - toMessage(level:LogLevel, message:String):Message
        - toErrorMessage(throwable:Throwable, String:message):Message
    }
    note top of LoggerComponent
        trace(), debug() etc. omitted
    end note
    class LoggerComponentSetup {
        - config:LoggerSetupConfiguration
        - socket:Socket
        + getLogger():Logger
        + configure(config:LoggerSetupConfiguration):void
        + setLogLevel(level:LogLevel):void
        + getLogLevel():LogLevel
        + setHostAndPort(host:String, port:int):void
        - openSocket():void
        - closeSocket():void
    }
    loggerinterface.LoggerSetup <|-- LoggerComponentSetup 
    LoggerComponentSetup o-- loggerinterface.LoggerSetupConfiguration
    LoggerComponentSetup --> loggerinterface.Logger
    loggerinterface.Logger <|-- LoggerComponent
    LoggerComponent --> loggercommon.Message
}

package "loggerserver" {
    class ConcurrentLoggerServer << Runnable >> {
        {static} + DEFAULT_PORT:int
        - port:int
        {static} + main(args:String[])
        + ConcurrentLoggerServer(port:int)
        + run():void
    }
    class ConcurrentClientHandler << Runnable >> {
        - socket:Socket
        - input:ObjectInputStream
        - output:ObjectOutputStream
        - persistorAdapter:StringPersistorAdapter
        {static} + listen(socket:Socket):ConcurrentClientHandler
        - ConcurrentClientHandler(socket:Socket, input:ObjectInputStream, output:ObjectOutputStream):ConcurrentClientHandler
        + run():void
    }
    ConcurrentLoggerServer o-- ConcurrentClientHandler
    ConcurrentClientHandler o-- stringpersistor.StringPersistorAdapter
    ConcurrentClientHandler --> stringpersistor.SimpleFormatter
    ConcurrentClientHandler --> loggercommon.Message
}

@enduml
